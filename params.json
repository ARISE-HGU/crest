{
  "name": "CREST",
  "tagline": "Concolic test generation tool for C",
  "body": "CREST is an automatic test generation tool for C.\r\n\r\nCREST works by inserting instrumentation code (using [CIL](http://cil.sourceforge.net)) into a target program to perform symbolic execution concurrently with the concrete execution.  The generated symbolic constraints are solved (using [Yices](http://yices.csl.sri.com)) to generate input that drive the test execution down new, unexplored program paths.\r\n\r\nCREST currently only reasons symbolically about linear, integer arithmetic.  CREST should be usable on any modern Linux or Mac OS X system.  For further building and usage information, see the [README](https://github.com/jburnim/crest/blob/master/README.md) file.  You may also want to check out the [FAQ](https://github.com/jburnim/crest/wiki/CREST-Frequently-Asked-Questions).\r\n\r\nFurther questions?  Please e-mail the CREST-users mailing list (CREST-users at googlegroups.com, searchable at https://groups.google.com/forum/#!forum/crest-users).\r\n\r\nA [short paper](http://jburnim.github.io/pubs/BurnimSen-ASE08.pdf) and [technical report](http://www.eecs.berkeley.edu/Pubs/TechRpts/2008/EECS-2008-123.html) about the search strategies in CREST are available at the homepage of [Jacob Burnim](http://jburnim.github.io).\r\n\r\n**News**:  CREST 0.1.2 is now available.  It can be downloaded at https://github.com/jburnim/crest/releases/tag/v0.1.2.  This is a bug fix release -- several build issues are fixed, as well as a bug in instrumenting unary expressions.\r\n\r\n**News**:  Heechul Yun has extended CREST to support non-linear arithmetic (using Z3).  For more information, see: https://github.com/heechul/crest-z3 and https://github.com/heechul/crest-z3/blob/master/README-z3.\r\n\r\n\r\n## Publications\r\n\r\nMany research groups have built on top of CREST.  If you would like your paper added to the list below, please contact [jburnim@gmail.com](mailto:jburnim@gmail.com).\r\n \r\n  1. _Analysis and Detection of SQL Injection Vulnerabilities via Automatic Test Case Generation of Programs_  \r\n    M Ruse, T Sarkar, S Basu  \r\n    IEEE/IPSJ International Symposium on Applications and the Internet (**SAINT**), 2010\r\n\r\n 1. _ParSym: Parallel Symbolic Execution_  \r\n    Junaid Haroon Siddiqui, Sarfraz Khurshid  \r\n    IEEE International Conference on Software Technology and Engineering (**ICSTE**), 2010\r\n\r\n 1. _Directed Test Suite Augmentation: Techniques and Tradeoffs_  \r\n    Zhihong Xu, Yunho Kim, Moonzoo Kim, Gregg Rothermel, Myra Cohen  \r\n    ACM SIGSOFT International Symposium on the Foundations of Software Engineering (**FSE**), 2010\r\n\r\n 1. _Striking a New Balance Between Program Instrumentation and Debugging Time_  \r\n    Olivier Crameri, Ricardo Bianchini, Willy Zwaenepoel  \r\n    ACM EuroSys Conference on Computer Systems (**EuroSys**), 2011\r\n\r\n 1. _Toward Online Testing of Federated and Heterogeneous Distributed Systems_  \r\n    Marco Canini, Vojin Jovanovic, Daniele Venzano, Boris Spasojevic, Olivier Crameri, and Dejan Kostic  \r\n    USENIX Annual Technical Conference (**ATC**), 2011\r\n\r\n 1. _Online testing of federated and heterogeneous distributed systems_  \r\n    Marco Canini, Vojin Jovanović, Daniele Venzano, Dejan Novaković, Dejan Kostić  \r\n    ACM SIGCOMM Conference, 2011\r\n\r\n 1. _SCORE: a Scalable Concolic Testing Tool for Reliable Embedded Software_  \r\n    Yunho Kim, Moonzoo Kim  \r\n    Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (**ESEC/FSE**), 2011\r\n\r\n 1. _MAGIC: Path-Guided Concolic Testing_  \r\n    Zhanqi Cui, Wei Le, Mary Lou Soffa, Linzhang Wang, Xuandong Li  \r\n    University of Virginia Dept. of Computer Science Tech Report, 2011\r\n\r\n 1. _Extracting and verifying cryptographic models from C protocol code by symbolic execution_  \r\n    Aizatulin, Gordon, Jürjens  \r\n    ACM SIGSAC Conference on Computer and Communications Security (**CCS**), 2011\r\n\r\n 1. _Enhancing structural software coverage by incrementally computing branch executability_  \r\n    Mauro Baluda, Pietro Braione, Giovanni Denaro, Mauro Pezzè  \r\n    Software Quality Journal, December 2011\r\n\r\n 1. _A Scalable Distributed Concolic Testing Approach: An Empirical Evaluation_  \r\n    Moonzoo Kim, Yunho Kim, Gregg Rothermel  \r\n    IEEE International Conference on Software Testing, Verification and Validation (**ICST**), 2012\r\n\r\n 1. _Industrial Application of Concolic Testing on Embedded Software: Case Studies_  \r\n    Moonzoo Kim, Yunho Kim, Yoonkyu Jang  \r\n    IEEE International Conference on Software Testing, Verification and Validation (**ICST**), 2012\r\n\r\n 1. _Industrial Application of Concolic Testing Approach: A Case Study on libexif by Using CREST-BV and KLEE_  \r\n    Y Kim, M Kim, YJ Kim, Y Jang  \r\n    ACM/IEEE International Conference on Software Engineering (**ICSE**), 2012\r\n\r\n 1. _Dynamic Symbolic Execution Guided by Data Dependency Analysis for High Structural Coverage_  \r\n    TheAnh Do, A.C.M. Fong, Russel Pears,\r\n    International Conference on Evaluation of Novel Approaches to Software Engineering (**ENASE**), 2012\r\n\r\n 1. _Using Concolic Testing to Refine Vulnerability Profiles in FUZZBUSTER_  \r\n    David J. Musliner, Jeffrey M. Rye, Tom Marble  \r\n    IEEE International Conference on Self-Adaptive and Self-Organizing Systems (**SASO**), 2012\r\n\r\n 1. _FoREnSiC - An Automatic Debugging Environment for C Programs_  \r\n    Roderick Bloem, Rolf Drechsler, Goerschwin Fey, Alexander Finder, Georg Hofferek, Robert Koenighofer, Jaan Raik, Urmas Repinski, Andre Suelflow  \r\n    International Haifa Verification Conference (**HVC**), 2012\r\n\r\n 1. _Feedback-Directed Unit Test Generation for C/C++ using Concolic Execution_  \r\n    Pranav Garg, Franjo Ivancic, Gogul Balakrishnan, Naoto Maeda, Aarti Gupta  \r\n    ACM/IEEE International Conference on Software Engineering (**ICSE**), 2013\r\n\r\n 1. _Con2colic Testing_  \r\n    Azadeh Farzan, Andreas Holzer, Niloofar Razavi, Helmut Veith  \r\n    Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (**ESEC/FSE**), 2013\r\n\r\n 1. _Meta-control for Adaptive Cybersecurity in FUZZBUSTER_  \r\n    David J. Musliner, Scott E. Friedman, Jeffrey M. Rye  \r\n    IEEE International Conference on Self-Adaptive and Self-Organizing Systems (**SASO**), 2013\r\n\r\n 1. _CCCD: Concolic Code Clone Detection_  \r\n    Daniel E. Krutz, Emad Shihab  \r\n    IEEE Working Conference on Reverse Engineering (**WCRE**), 2013\r\n\r\n 1. _Improving Automated Cybersecurity by Generalizing Faults and Quantifying Patch Performance_  \r\n   Scott E. Friedman, David J. Musliner, Jeffrey Rye  \r\n   International Journal on Advances in Security, 2014\r\n\r\n 1. _Software testing with code-based test generators: data and lessons learned from a case study with an industrial software component_  \r\n    Pietro Braione, Giovanni Denaro, Andrea Mattavelli, Mattia Vivanti, Ali Muhammad  \r\n    Software Quality Journal, 2014\r\n\r\n 1. _How We Get There: A Context-Guided Search Strategy in Concolic Testing_  \r\n    Hyunmin Seo, Sunghun Kim  \r\n    ACM SIGSOFT International Symposium on the Foundations of Software Engineering (**FSE**), 2014\r\n\r\n 1. _PBCOV: a property-based coverage criterion_  \r\n    Kassem Fawaz, Fadi Zaraket, Wes Masri, Hamza Harkous  \r\n    Software Quality Journal, March 2015\r\n\r\n 1. _Directed test suite augmentation: an empirical investigation_  \r\n    Zhihong Xu, Yunho Kim, Moonzoo Kim, Myra B. Cohen, Gregg Rothermel  \r\n    Software Testing, Verification and Reliability, March 2015\r\n\r\n 1. _Systematic Testing of Reactive Software with Non-deterministic Events: A Case Study on LG Electric Oven_  \r\n    Yongbae Park, Shin Hong, Moonzoo Kim, Dongju Lee, Junhee Cho  \r\n    ACM/IEEE International Conference on Software Engineering (**ICSE**), 2015\r\n\r\n 1. _Reusing constraint proofs in program analysis_  \r\n    Andrea Aquino, Francesco A. Bianchi, Meixian Chen, Giovanni Denaro, Mauro Pezzè  \r\n    ACM SIGSOFT International Symposium on Software Testing and Analysis (**ISSTA**), 2015\r\n\r\n 1. _Abstraction-driven Concolic Testing_  \r\n    Przemysław Daca, Ashutosh Gupta, Thomas A. Henzinger\r\n    International Conference on Verification, Model Checking, and Abstract Interpretation (**VMCAI**), 2016\r\n\r\n 1. _CLORIFI: software vulnerability discovery using code clone verification_  \r\n    Hongzhe Li, Hyuckmin Kwon, Jonghoon Kwon, Heejo Lee  \r\n    Concurrency and Computation: Practice and Experience, 2016\r\n\r\n 1. _PAC learning-based verification and model synthesis_  \r\n    Yu-Fang Chen, Chiao Hsieh, Ondřej Lengál, Tsung-Ju Lii, Ming-Hsien Tsai, Bow-Yaw Wang, Bow-Yaw Wang  \r\n    ACM/IEEE International Conference on Software Engineering (**ICSE**), 2016\r\n\r\n 1. _Design of a Modified Concolic Testing Algorithm with Smaller Constraints_  \r\n    Yavuz Koroglu, Alper Sen  \r\n    International Workshop on Constraints in Software Testing, Verification and Analysis (**CSTVA**), 2016\r\n",
  "google": "UA-4470377-6",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}